import pandas as pd
import pickle
import numpy as np
import math
import matplotlib.pyplot as plt
from numpy import *

(W, H) = pickle.load(open('NMF_100_topics_vanc_WH.pkl','rb'))
names = np.array(pickle.load(open('TF_IDF_feature_names.pkl','rb')))
print(W.shape)
print(H.shape)
NT = 100 #number of topics
Nt = W.shape[0] #number of tweets
Spatial = pickle.load(open('pandas_data_vanc.pkl','rb'))

row_sums = W.sum(axis=1)
W_normal = W / row_sums[:, np.newaxis]
where_are_NaNs = isnan(W_normal)
W_normal[where_are_NaNs] = 0

maxlat = Spatial["latitude"].max()
minlat = Spatial["latitude"].min()
maxlong = Spatial["longitude"].max()
minlong = Spatial["longitude"].min()
print(maxlat, minlat)
print(maxlong, minlong)

hx = 0.01
hy = 0.01
Nx = math.ceil((maxlong - minlong) / hx)
Ny = math.ceil((maxlat - minlat) / hy)
print(Nx)
print(Ny)

#Spatial_precise = Spatial[Spatial["gps_precision"] == 10.0]#taking gonly location accurete tweets
#
# distr = []
# for T in range(0, NT):
#     pdf = np.zeros((Nx, Ny))
#     distr.append(pdf)
# for t in range(0, Nt):
#     if Spatial.iloc[t]["gps_precision"] == 10:
#         x = Spatial.iloc[t]["latitude"]
#         y = Spatial.iloc[t]["longitude"]
#         x_bin = math.floor((x-minlat)/hx)
#         y_bin = math.floor((y-minlong)/hy)
#         for T in range(0, NT):
#             distr[T][x, y] += W[t, T]
#             #pdf[math.floor((x-minlat)/hx), math.floor((y-minlong)/hy)] += W[t, T]
#     print(t)
data = []
for i in range(0,NT):
    name = 'distr' + str(i) + '.dat'
    test = np.load(name)
    data.append(test)


theta = 110
bad = []
LPlist = []
for t in range(0, Nt):
    x = Spatial.iloc[t]["longitude"]
    y = Spatial.iloc[t]["latitude"]
    x_bin = math.floor((x - minlong) / hx) - 1
    y_bin = math.floor((y - minlat) / hy) - 1
    distribution = np.zeros((Nx, Ny))
    for T in range(0, NT):
        distribution += (W_normal[t, T] * data[T])

    L_P = ((np.sqrt(distribution)).sum()) ** 2
    LPlist.append(L_P)
    print(L_P)
    if L_P > theta or distribution.sum() < 0.001:
        bad.append(t)
print(len(bad) / Nt)
pickle.dump(LPlist, open("LPlist.p", "wb"))
## percentage test
# count = 0
# logProb = 0
# for t in range(math.ceil(Nt*0.8), Nt):
#     if t not in bad:
#         count += 1
#         x = Spatial.iloc[t]["longitude"]
#         y = Spatial.iloc[t]["latitude"]
#         x_bin = math.floor((x - minlong) / hx) - 1
#         y_bin = math.floor((y - minlat) / hy) - 1
#         prob = 0
#         for T in range(0, NT):
#             prob += (W_normal[t, T] * data[T][x_bin, y_bin])
#            # if prob>1:
#            #     print(W_normal[t, T])
#            #     print('stop')
#         logProb += math.log(prob+0.0001)
#         #print(logProb)
#
# print(logProb/count)
#
# print(count)


# location estimate
count = 0
error = 0
for t in range(math.ceil(Nt*0.8), Nt):
    if t not in bad:
        count += 1
        x = Spatial.iloc[t]["longitude"]
        y = Spatial.iloc[t]["latitude"]
        x_bin = math.floor((x - minlong) / hx) - 1
        y_bin = math.floor((y - minlat) / hy) - 1

        distribution = np.zeros((Nx, Ny))
        for T in range(0, NT):
            distribution += (W_normal[t, T] * data[T])
        indices = np.where(distribution == distribution.max())
        x_bin_predict = indices[0][0]
        y_bin_predict = indices[1][0]
        print(np.absolute(x_bin - x_bin_predict))
        print(np.absolute(y_bin - y_bin_predict))
        diffX = np.absolute(x_bin - x_bin_predict) * 0.01 * 111 * math.cos(maxlat * math.pi / 180)
        diffY = np.absolute(y_bin - y_bin_predict) * 0.01 * 111
        diff = math.sqrt(diffX**2 + diffY**2)
        error += diff

print(error)
print(count)
print(error/count)
